// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NoteRPCClient is the client API for NoteRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NoteRPCClient interface {
	CreateNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*Note, error)
	GetNotes(ctx context.Context, in *OwnerUid, opts ...grpc.CallOption) (*NoteList, error)
	GetNote(ctx context.Context, in *SingleNote, opts ...grpc.CallOption) (*Note, error)
	UpdateNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteNote(ctx context.Context, in *SingleNote, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type noteRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewNoteRPCClient(cc grpc.ClientConnInterface) NoteRPCClient {
	return &noteRPCClient{cc}
}

func (c *noteRPCClient) CreateNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*Note, error) {
	out := new(Note)
	err := c.cc.Invoke(ctx, "/micro.serv.note.NoteRPC/CreateNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteRPCClient) GetNotes(ctx context.Context, in *OwnerUid, opts ...grpc.CallOption) (*NoteList, error) {
	out := new(NoteList)
	err := c.cc.Invoke(ctx, "/micro.serv.note.NoteRPC/GetNotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteRPCClient) GetNote(ctx context.Context, in *SingleNote, opts ...grpc.CallOption) (*Note, error) {
	out := new(Note)
	err := c.cc.Invoke(ctx, "/micro.serv.note.NoteRPC/GetNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteRPCClient) UpdateNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/micro.serv.note.NoteRPC/UpdateNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteRPCClient) DeleteNote(ctx context.Context, in *SingleNote, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/micro.serv.note.NoteRPC/DeleteNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NoteRPCServer is the server API for NoteRPC service.
// All implementations must embed UnimplementedNoteRPCServer
// for forward compatibility
type NoteRPCServer interface {
	CreateNote(context.Context, *Note) (*Note, error)
	GetNotes(context.Context, *OwnerUid) (*NoteList, error)
	GetNote(context.Context, *SingleNote) (*Note, error)
	UpdateNote(context.Context, *Note) (*emptypb.Empty, error)
	DeleteNote(context.Context, *SingleNote) (*emptypb.Empty, error)
	mustEmbedUnimplementedNoteRPCServer()
}

// UnimplementedNoteRPCServer must be embedded to have forward compatible implementations.
type UnimplementedNoteRPCServer struct {
}

func (UnimplementedNoteRPCServer) CreateNote(context.Context, *Note) (*Note, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNote not implemented")
}
func (UnimplementedNoteRPCServer) GetNotes(context.Context, *OwnerUid) (*NoteList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotes not implemented")
}
func (UnimplementedNoteRPCServer) GetNote(context.Context, *SingleNote) (*Note, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNote not implemented")
}
func (UnimplementedNoteRPCServer) UpdateNote(context.Context, *Note) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNote not implemented")
}
func (UnimplementedNoteRPCServer) DeleteNote(context.Context, *SingleNote) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNote not implemented")
}
func (UnimplementedNoteRPCServer) mustEmbedUnimplementedNoteRPCServer() {}

// UnsafeNoteRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NoteRPCServer will
// result in compilation errors.
type UnsafeNoteRPCServer interface {
	mustEmbedUnimplementedNoteRPCServer()
}

func RegisterNoteRPCServer(s grpc.ServiceRegistrar, srv NoteRPCServer) {
	s.RegisterService(&NoteRPC_ServiceDesc, srv)
}

func _NoteRPC_CreateNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Note)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteRPCServer).CreateNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/micro.serv.note.NoteRPC/CreateNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteRPCServer).CreateNote(ctx, req.(*Note))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteRPC_GetNotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerUid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteRPCServer).GetNotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/micro.serv.note.NoteRPC/GetNotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteRPCServer).GetNotes(ctx, req.(*OwnerUid))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteRPC_GetNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleNote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteRPCServer).GetNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/micro.serv.note.NoteRPC/GetNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteRPCServer).GetNote(ctx, req.(*SingleNote))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteRPC_UpdateNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Note)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteRPCServer).UpdateNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/micro.serv.note.NoteRPC/UpdateNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteRPCServer).UpdateNote(ctx, req.(*Note))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteRPC_DeleteNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleNote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteRPCServer).DeleteNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/micro.serv.note.NoteRPC/DeleteNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteRPCServer).DeleteNote(ctx, req.(*SingleNote))
	}
	return interceptor(ctx, in, info, handler)
}

// NoteRPC_ServiceDesc is the grpc.ServiceDesc for NoteRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NoteRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "micro.serv.note.NoteRPC",
	HandlerType: (*NoteRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNote",
			Handler:    _NoteRPC_CreateNote_Handler,
		},
		{
			MethodName: "GetNotes",
			Handler:    _NoteRPC_GetNotes_Handler,
		},
		{
			MethodName: "GetNote",
			Handler:    _NoteRPC_GetNote_Handler,
		},
		{
			MethodName: "UpdateNote",
			Handler:    _NoteRPC_UpdateNote_Handler,
		},
		{
			MethodName: "DeleteNote",
			Handler:    _NoteRPC_DeleteNote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
